openapi: 3.0.0
info:
  title: MoviePool API
  description: RESTful API for movie lovers that want to be able to access information about different movies
  version: 1.0.0
tags:
  - name: Users
    description: Everything about Users
  - name: Movies
paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a user
      description: This can be done by anyone.
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  example: Jane Doe
                password:
                  type: string
                  example: testpassword1234
                email:
                  type: string
                  example: janedoe@testmail.com
                birthDate:
                  type: integer
                  example: DD-MM-YYYY
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    tpye: string
                    example: ObjectId('12345abcde67fg890h1i2jk3')
                  userName:
                    type: string
                    example: Jane Doe
                  password:
                    type: string
                    example: testpassword1234
                  email:
                    type: string
                    example: janedoe@testmail.com
                  birthDate:
                    type: integer
                    example: DD-MM-YY
                  favoriteMovies:
                    type: array
                      - ObjectId('000')
                      - ObjectId('111')
    get:
      tags:
        - Users
      summary: Get all users
      description: Get all users. This can only be done by a logged in user.
      responses:
        '200':
          description: Success
        '500':
          description: Failed
          content:
            application/json:
              schema:
                type: object # array
                properties:
                  _id:
                    type: integer
                    example: 0
                  userName:
                    type: string
                  password:
                    type: string
                  email:
                    type: string
                  birthDate:
                    type: integer
                    example: DD-MM-YYYY
                  favoriteMovies:
                    type: array
                    xml:
                      wrapped: true
                      properties:
                        movieid: integer
                        example: 1042034
  /users/{userName}:
    get:
      tags:
        - Users
      summary: Get a user by user name
      description: Get a user by user name. This can only be done by a logged in user.
    put:
      tags:
        - Users
      summary: Update user by user name
      description: Update user by user name. This can only be done by a logged in user.
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Delete a user by user name. This can only be done by a logged in user.
      parameters:
        - name: userName
          in: path
          description: The name of a user to be deleted.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User has been deleted.
        '400':
          description: User was not found.
  /users/{userName}/movies/{movieid}:
    post:
      tags:
        - Users
      summary: Add a movie
      description: Add a movie to user's favorite movies list. This can only be done by a logged in user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object # array
              properties:
                userName:
                  type: string
      responses:
        '201':
          description: Success
        '500':
          description: Failed
    delete:
      tags:
        - Users
      summary: Delete a movie
      description: Delete a movie off of a user's favorite movies list. This can only be done by a logged in user.
      parameters:
        - name: userName
          in: path
          description: The name of a user with a favorite movies list.
          required: true
          schema:
            type: string
        - name: movieid
          in: path
          description: The movie-id of a movie to be deleted off of a user's favorite movies list.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Movie has been deleted.
        '500':
          description: TODO - Error.
  /movies:
    get:
      tags:
        - Movies
      summary: Get all movies
      description: Get all movies. This can only be done by a logged in user.
      responses:
        '200':
          description: Success
        '500':
          description: Failed
          content:
            application/json:
              schema:
                type: object # array
                properties:
                  genre:
                    genreName:
                      type: string
                    description:
                      type: string
                  description:
                    directorName:
                      type: string
                    bio:
                      type: string
                    birthDate:
                      type: integer
                      example: DD-MM-YYYY
                    deathDate:
                      type: integer
                      example: DD-MM-YYYY
  /movies/{title}:
    get:
      tags:
        - Movies
      summary: Get a specific movie
      description: Get a specific movie by title. This can only be done by a logged in user.
  /movies/genres/{genreName}:
    get:
      tags:
        - Movies
      summary: Get a specific movie genre
      description: Get a specific movie genre by genre name. This can only be done by a logged in user.
  /movies/directors/{directorName}:
    get:
      tags:
        - Movies
      summary: Get a specific director
      description: Get a specific director by director name. This can only be done by a logged in user.